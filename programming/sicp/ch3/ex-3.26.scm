#lang sicp

;; https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-22.html#%_thm_3.26

;; Inspired by ../ch2/set-as-tree.scm, but with kv pairs as the "entry" of each
;; tree node.
(define (tree-entry tree) (car tree))
(define (tree-key tree) (car (tree-entry tree)))
(define (tree-value tree) (cdr (tree-entry tree)))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (make-table compare)
  (define local-table (list '*table*))
  (define (lookup key tree)
    (if (null? tree)
        #f
        (let ((cmp (compare key (tree-key tree))))
          (cond ((< 0 cmp) (lookup key (left-branch tree)))
                ((> 0 cmp) (lookup key (right-branch tree)))
                (else (tree-value tree))))))
  (define (insert! key value)
    (define (tree-add key value tree)
      (if (null? tree)
          (make-tree (cons key value) '() '())
          (let ((cmp (compare key (tree-key tree))))
            (cond ((< 0 cmp) (make-tree (tree-entry tree)
                                        (left-branch tree)
                                        (tree-add key value (right-branch tree))))
                  ((> 0 cmp) (make-tree (tree-entry tree)
                                        (tree-add key value (left-branch tree))
                                        (right-branch tree)))
                  (else (set-cdr! (tree-entry tree) value)
                        tree)))))
    (set-cdr! local-table (tree-add key value (cdr local-table)))
    'ok)
  (define (dispatch m)
    (cond ((eq? m 'lookup-proc) (lambda (key) (lookup key (cdr local-table))))
          ((eq? m 'insert-proc!) insert!)
          ((eq? m 'table) local-table)
          (else (error "Unknown operation: TABLE" m))))
  dispatch)

(define (cmp a b)
  (cond ((< a b) -1)
        ((> a b)  1)
        (else 0)))
(define table (make-table cmp))
(define get (table 'lookup-proc))
(define put (table 'insert-proc!))

(put 1 'one)
(put 5 'five)
(put 2 'two)
(put 4 'four)
(put 3 'three)
(put 10 'ten)
(get 1)
(get 42)
(table 'table)
